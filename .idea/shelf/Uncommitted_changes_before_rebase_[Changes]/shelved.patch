Index: src/main/scala/DataApi/DataAPI.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package DataApi\r\n\r\nimport Enums.QueryType\r\nimport org.apache.spark.sql.functions.{col, count, lit, round, udf}\r\nimport org.apache.spark.sql._\r\n\r\nimport scala.jdk.CollectionConverters._\r\nimport com.datawizards.splot.api.implicits._\r\nimport org.knowm.xchart.{QuickChart, SwingWrapper, XYChart}\r\n\r\nimport java.util\r\n\r\nobject DataAPI {\r\n  private var dayly :DataFrame = null\r\n  private var monthly :DataFrame = null\r\n  private var hourly :DataFrame = null\r\n  private var precip :DataFrame = null\r\n  private var remarks :DataFrame = null\r\n  private var stations : DataFrame = null\r\n  def start(spark: SparkSession )={\r\n    val d= new Array[DataFrame](12)\r\n    val m= new Array[DataFrame](12)\r\n    val h= new Array[DataFrame](12)\r\n    val p= new Array[DataFrame](12)\r\n    val r= new Array[DataFrame](12)\r\n    val s= new Array[DataFrame](12)\r\n\r\n    /*for (i<- 0 to 11){\r\n      var input=\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\"+ {if( i+1<10 ) \"0\"+(i+1) else (i+1) } +\"\\\\2013\"+{if( (i+1)<10 ) \"0\"+(i+1) else (i+1) }+\"daily.txt\"\r\n      d(i)=spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(input)\r\n      input=\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\"+ {if( i+1<10 ) \"0\"+(i+1) else (i+1) } +\"\\\\2013\"+{if( (i+1)<10 ) \"0\"+(i+1) else (i+1) }+\"monthly.txt\"\r\n      m(i)=spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(input)\r\n      input = \"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\" + {if (i + 1 < 10) \"0\" + (i + 1) else (i + 1)} + \"\\\\2013\" + {if ((i + 1) < 10) \"0\" + (i + 1) else (i + 1)} + \"hourly.txt\"\r\n      h(i)= spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(input)\r\n      input = \"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\" + {if (i + 1 < 10) \"0\" + (i + 1) else (i + 1)} + \"\\\\2013\" + {if ((i + 1) < 10) \"0\" + (i + 1) else (i + 1)} + \"precip.txt\"\r\n      p(i) =spark.read.option(\"header\", \"true\").option(\"inferschema\", \"true\").csv(input)\r\n      input = \"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\" + {if (i + 1 < 10) \"0\" + (i + 1) else (i + 1)} + \"\\\\2013\" + {if ((i + 1) < 10) \"0\" + (i + 1) else (i + 1)} + \"remarks.txt\"\r\n      r(i)= spark.read.option(\"header\", \"true\").option(\"inferschema\", \"true\").csv(input)\r\n      input= \"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD2013\" + {if (i + 1 < 10) \"0\" + (i + 1) else (i + 1)} + \"\\\\2013\" + {if ((i + 1) < 10) \"0\" + (i + 1) else (i + 1)} + \"station.txt\"\r\n      s(i) = spark.read.option(\"header\", \"true\").option(\"inferschema\", \"true\").option(\"delimiter\",\"|\").csv(input)\r\n    }\r\n    dayly = d.reduce(_ union _)\r\n    monthly = m.reduce(_ union _)\r\n    hourly = h.reduce(_ union _)\r\n    precip = p.reduce(_ union _)\r\n    remarks = r.reduce(_ union _)\r\n    stations = s.reduce(_ union _).dropDuplicates()*/\r\n    dayly = spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302daily.txt\")\r\n    monthly =spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302monthly.txt\")\r\n    hourly=spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302hourly.txt\")\r\n    precip = spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302precip.txt\")\r\n    remarks = spark.read.option(\"header\",\"true\").option(\"inferschema\",\"true\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302remarks.txt\")\r\n    stations = spark.read.option(\"header\", \"true\").option(\"inferschema\", \"true\").option(\"delimiter\",\"|\").csv(\"D:\\\\datimeteorologici\\\\datimeteo\\\\QCLCD201302\\\\201302station.txt\")\r\n  }\r\n  def getDatas(dataframe:String): DataFrame ={\r\n    val df = dataframe match {\r\n      case \"dayly\"=> dayly\r\n      case \"monthly\"=> monthly\r\n      case \"hourly\"=>hourly\r\n      case \"precip\"=>precip\r\n      case \"remarks\"=> remarks\r\n      case \"stations\" => stations\r\n    }\r\n    return df\r\n  }\r\n  def getMeasureByDay (set:String, data:String, measure:String, tipo:QueryType, param:String ): java.util.Map[String,String]={\r\n    val df: DataFrame = getDatas(set)\r\n    val stationOfInterest = stations.select(\"WBAN\", \"Location\").filter(generateStationsQuery(tipo, param))\r\n    val ris : Dataset[Row] =  df.join(stationOfInterest, \"WBAN\").select(\"Location\",measure).filter(\"YearMonthDay =\" + data)\r\n    val m: scala.collection.mutable.Map[String,String] =  scala.collection.mutable.Map[String,String]()\r\n    ris.collect().map(row=> m.put(row.getString(0),row.getString(1)))\r\n    return m.asJava\r\n  }\r\n  def getMeasureInPeriod(set: String, in: String, fin:String, measure:String, tipo: QueryType, param: String):DataFrame = {\r\n    val df: DataFrame = getDatas(set)\r\n    var date=\"YearMonthDay\"\r\n    val stationOfInterest = stations.select(\"WBAN\", \"Location\").filter(generateStationsQuery(tipo, param))\r\n    if(set==\"hourly\"){\r\n      date = \"Date\"\r\n      return df.join(stationOfInterest, \"WBAN\").select(\"WBAN\",\"Location\", date ,\"Time\", measure).filter(date+\">=\" + in + \" AND \"+  date+\"<=\" + fin)\r\n    }\r\n    else {\r\n      return df.join(stationOfInterest, \"WBAN\").select(\"WBAN\",\"Location\", date , measure).filter(date+\">=\" + in + \" AND \"+  date+\"<=\" + fin)\r\n    }\r\n  }\r\n  def getMeasureInHourlyPeriod(data: String, in: String, fin: String, measure: String, tipo: QueryType, param: String): DataFrame = {\r\n    val df: DataFrame = getDatas(\"hourly\")\r\n    val stationOfInterest = stations.select(\"WBAN\",\"Location\").filter(generateStationsQuery(tipo, param)).distinct()\r\n    return df.join(stationOfInterest, \"WBAN\").select(\"WBAN\",\"Location\",\"Date\",\"Time\",measure).filter(\"Date=\" + data + \" AND Time>=\" + in + \" AND Time<= \"+fin)\r\n  }\r\n  def getMonthlyMeasure( month:String, measure:String, tipo:QueryType,param:String): util.Map[String,String]={\r\n    val df: DataFrame = getDatas(\"monthly\")\r\n    val stationOfInterest = stations.select(\"WBAN\",\"Location\").filter(generateStationsQuery(tipo, param))\r\n    val ris : Dataset[Row] = df.join(stationOfInterest, \"WBAN\").select(\"Location\",measure).filter(\"YearMonth=\" + month).filter(col(measure).notEqual(\"-\").and(col(measure).notEqual(\"M\")).and(col(measure).isNotNull))\r\n    val m: scala.collection.mutable.Map[String, String] = scala.collection.mutable.Map[String, String]()\r\n    ris.collect().map(row => m.put(row.getString(0), row.getString(1)))\r\n    return m.asJava\r\n  }\r\n  def getMonthlyMeasureInPeriod( in: String, fin:String, measure: String, tipo: QueryType, param:String): DataFrame = {\r\n    val df: DataFrame = getDatas(\"monthly\")\r\n    val stationOfInterest = stations.select(\"WBAN\",\"Location\").filter(generateStationsQuery(tipo, param))\r\n    return df.join(stationOfInterest, \"WBAN\").select(\"WBAN\",\"Location\",\"YearMonth\",measure).filter(\"YearMonth <= \" + fin +\" AND YearMonth >= \"+ in)\r\n  }\r\n  def getReliabilityOfStations(set:String, measure:String): Array[Array[String]]={\r\n    val df: DataFrame = getDatas(set)\r\n    val missingValue :DataFrame = df.filter( measure+\"= 'M'\").groupBy(\"WBAN\").agg(functions.count(measure).as(\"NumberOfMissing\"))\r\n    val other: DataFrame = df.groupBy(\"WBAN\").agg(functions.count(measure).as(\"NumberOfMeasures\"))\r\n    val ris : DataFrame = missingValue.join(other, \"WBAN\").withColumn(\"One\",lit(1)).withColumn(\"Reliability\", round((col(\"One\") - col(\"NumberOfMissing\").divide(col(\"NumberOfMeasures\")))*100)).select(\"WBAN\",\"Reliability\")\r\n    val stationsName = getDatas(\"stations\").select(\"WBAN\",\"Location\").dropDuplicates()\r\n    return ris.join(stationsName, \"WBAN\").select(\"Location\",\"Reliability\").collect().map(row => Array(row.getString(0),row.getDouble(1).toString))\r\n  }\r\n  //\r\n  def getPrecipitationOver(in:String, fin:String,threshold:String, queryType: QueryType, param:String ):DataFrame={\r\n    val df = getMeasureInPeriod(\"precip\",in,fin,\"Precipitation\", queryType, param)\r\n    val filtered :DataFrame = df.filter(\"Precipitation>=\"+ threshold).groupBy(\"WBAN\").agg(count(\"WBAN\").as(\"Filtered\"))\r\n    filtered.show()\r\n    val unfiltered : DataFrame = df.groupBy(\"WBAN\").count()\r\n    unfiltered.show()\r\n    val calculate = udf( calculatePercentage _)\r\n    val partial:DataFrame = filtered.join(unfiltered,\"WBAN\").withColumn(\"Percentage\", calculate(col(\"Filtered\"),col(\"count\")))\r\n    val stationsNames : DataFrame = getStationsOfInterest(queryType,param,\"Location\")\r\n    return partial.join(stationsNames,\"WBAN\").select(\"Location\",\"Percentage\")\r\n  }\r\n\r\n  def calculatePercentage(over:Double, total: Double):Double={\r\n    return Math.round((over/total)*100)\r\n  }\r\n\r\n  def getDistributionOfWheaterType(in:String,fin:String, stato:String):DataFrame={\r\n    val df = getMeasureInPeriod(\"hourly\",in,fin,\"WeatherType\", QueryType.STATE, stato)\r\n    val numMeasures:Long= df.count()\r\n    return df.groupBy(\"WeatherType\").agg(round((functions.count(\"WBAN\")/numMeasures.toFloat)*100).as(\"Distribution\"))\r\n  }\r\n  def getWindChill(date:String, queryType: QueryType, param:String):DataFrame={\r\n    val windchillcalc = udf(calculateWindChill _)\r\n    val stationOfInterest = getStationsOfInterest(queryType,param,\"Location\")\r\n    return getDatas(\"hourly\").join(stationOfInterest, \"WBAN\").filter(\"Date=\" + date ).withColumn(\"WindChill\", windchillcalc(col(\"DryBulbCelsius\"),col(\"WindSpeed\"))).select(\"WBAN\",\"Location\",\"Date\",col(\"Time\").toString(),\"WindChill\")\r\n  }\r\n  def calculateWindChill(temperature:Double,speed:Double):Double={\r\n    return 35.74+0.62*temperature-35.75*Math.pow(speed,0.16)+0.4275*temperature*Math.pow(speed,0.16)\r\n  }\r\n\r\n  def generateStationsQuery(tipo:QueryType,param:String):String={\r\n    var ris:String=null\r\n    val query = tipo match {\r\n      case QueryType.ZONE => ris = \"Name='\"+param+\"'\"\r\n      case QueryType.STATION =>ris = \"WBAN=\" + param\r\n      case QueryType.STATE =>  ris =\"State='\" + param + \"'\"\r\n      case QueryType.TZONE =>  ris =\"TimeZone=\" + param\r\n    }\r\n    return ris\r\n  }\r\n\r\n  def getStationsOfInterest(tipo:QueryType,param:String, reqinfo: String): DataFrame={\r\n    return stations.select(\"WBAN\", reqinfo).filter(generateStationsQuery(tipo, param)).dropDuplicates()\r\n  }\r\n  def getAllDates():Array[String]={\r\n  return dayly.select(\"YearMonthDay\").collect().map(row=>row.getInt(0).toString())\r\n  }\r\n  def getStationsName(): Array[String] ={\r\n    return  stations.filter(col(\"Location\").isNotNull.and(col(\"WBAN\").isNotNull)).select(\"WBAN\",\"Location\").collect().map(row=> row.getInt(0)+\"-\"+row.getString(1))\r\n  }\r\n  def getStates(): Array[String] = {\r\n    return stations.select(\"State\").distinct().collect().map(row => row.getString(0))\r\n  }\r\n  def getZone():Array[String] = {\r\n    return stations.filter(col(\"Name\").isNotNull.and(col(\"WBAN\").isNotNull)).select(\"Name\").collect().map(row=> row.getString(0))\r\n  }\r\n  def getTimezone(): Array[String] = {\r\n    return stations.select(\"TimeZone\").filter(\"TimeZone is not Null\").distinct().sort().collect().map(row => row.getInt(0).toString())\r\n  }\r\n  def getMonths():Array[String]={\r\n    return monthly.select(\"YearMonth\").dropDuplicates().collect().map(row=>row.getInt(0).toString)\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/scala/DataApi/DataAPI.scala b/src/main/scala/DataApi/DataAPI.scala
--- a/src/main/scala/DataApi/DataAPI.scala	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/scala/DataApi/DataAPI.scala	(date 1676547846672)
@@ -17,15 +17,16 @@
   private var precip :DataFrame = null
   private var remarks :DataFrame = null
   private var stations : DataFrame = null
+  private var sparkSession: SparkSession =null
   def start(spark: SparkSession )={
+    sparkSession=spark
     val d= new Array[DataFrame](12)
     val m= new Array[DataFrame](12)
     val h= new Array[DataFrame](12)
     val p= new Array[DataFrame](12)
     val r= new Array[DataFrame](12)
     val s= new Array[DataFrame](12)
-
-    /*for (i<- 0 to 11){
+    for (i<- 0 to 11){
       var input="D:\\datimeteorologici\\datimeteo\\QCLCD2013"+ {if( i+1<10 ) "0"+(i+1) else (i+1) } +"\\2013"+{if( (i+1)<10 ) "0"+(i+1) else (i+1) }+"daily.txt"
       d(i)=spark.read.option("header","true").option("inferschema","true").csv(input)
       input="D:\\datimeteorologici\\datimeteo\\QCLCD2013"+ {if( i+1<10 ) "0"+(i+1) else (i+1) } +"\\2013"+{if( (i+1)<10 ) "0"+(i+1) else (i+1) }+"monthly.txt"
@@ -39,19 +40,19 @@
       input= "D:\\datimeteorologici\\datimeteo\\QCLCD2013" + {if (i + 1 < 10) "0" + (i + 1) else (i + 1)} + "\\2013" + {if ((i + 1) < 10) "0" + (i + 1) else (i + 1)} + "station.txt"
       s(i) = spark.read.option("header", "true").option("inferschema", "true").option("delimiter","|").csv(input)
     }
-    dayly = d.reduce(_ union _)
-    monthly = m.reduce(_ union _)
-    hourly = h.reduce(_ union _)
-    precip = p.reduce(_ union _)
-    remarks = r.reduce(_ union _)
-    stations = s.reduce(_ union _).dropDuplicates()*/
-    dayly = spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302daily.txt")
+    dayly = d.reduce(_ union _).cache()
+    monthly = m.reduce(_ union _).cache()
+    hourly = h.reduce(_ union _).cache()
+    precip = p.reduce(_ union _).cache()
+    remarks = r.reduce(_ union _).cache()
+    stations = s.reduce(_ union _).dropDuplicates().cache()
+    /*dayly = spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302daily.txt")
     monthly =spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302monthly.txt")
     hourly=spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302hourly.txt")
     precip = spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302precip.txt")
     remarks = spark.read.option("header","true").option("inferschema","true").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302remarks.txt")
     stations = spark.read.option("header", "true").option("inferschema", "true").option("delimiter","|").csv("D:\\datimeteorologici\\datimeteo\\QCLCD201302\\201302station.txt")
-  }
+  */}
   def getDatas(dataframe:String): DataFrame ={
     val df = dataframe match {
       case "dayly"=> dayly
@@ -65,16 +66,16 @@
   }
   def getMeasureByDay (set:String, data:String, measure:String, tipo:QueryType, param:String ): java.util.Map[String,String]={
     val df: DataFrame = getDatas(set)
-    val stationOfInterest = stations.select("WBAN", "Location").filter(generateStationsQuery(tipo, param))
-    val ris : Dataset[Row] =  df.join(stationOfInterest, "WBAN").select("Location",measure).filter("YearMonthDay =" + data)
+    val stationOfInterest = getStationsOfInterest(tipo,param,"Location")
+    val ris : Dataset[Row] =  df.join(stationOfInterest, "WBAN").select("Location",measure).filter("YearMonthDay =" + data).filter(col(measure).notEqual("-").and(col(measure).notEqual("M")).and(col(measure).isNotNull))
     val m: scala.collection.mutable.Map[String,String] =  scala.collection.mutable.Map[String,String]()
-    ris.collect().map(row=> m.put(row.getString(0),row.getString(1)))
+    sparkSession.sparkContext.parallelize(ris.collect(),4).map(row=> m.put(row.getString(0),row.getString(1)))
     return m.asJava
   }
   def getMeasureInPeriod(set: String, in: String, fin:String, measure:String, tipo: QueryType, param: String):DataFrame = {
     val df: DataFrame = getDatas(set)
     var date="YearMonthDay"
-    val stationOfInterest = stations.select("WBAN", "Location").filter(generateStationsQuery(tipo, param))
+    val stationOfInterest = getStationsOfInterest(tipo,param,"Location")
     if(set=="hourly"){
       date = "Date"
       return df.join(stationOfInterest, "WBAN").select("WBAN","Location", date ,"Time", measure).filter(date+">=" + in + " AND "+  date+"<=" + fin)
@@ -85,20 +86,20 @@
   }
   def getMeasureInHourlyPeriod(data: String, in: String, fin: String, measure: String, tipo: QueryType, param: String): DataFrame = {
     val df: DataFrame = getDatas("hourly")
-    val stationOfInterest = stations.select("WBAN","Location").filter(generateStationsQuery(tipo, param)).distinct()
+    val stationOfInterest = getStationsOfInterest(tipo,param,"Location").filter(generateStationsQuery(tipo, param)).distinct()
     return df.join(stationOfInterest, "WBAN").select("WBAN","Location","Date","Time",measure).filter("Date=" + data + " AND Time>=" + in + " AND Time<= "+fin)
   }
   def getMonthlyMeasure( month:String, measure:String, tipo:QueryType,param:String): util.Map[String,String]={
     val df: DataFrame = getDatas("monthly")
-    val stationOfInterest = stations.select("WBAN","Location").filter(generateStationsQuery(tipo, param))
+    val stationOfInterest = getStationsOfInterest(tipo,param,"Location").filter(generateStationsQuery(tipo, param))
     val ris : Dataset[Row] = df.join(stationOfInterest, "WBAN").select("Location",measure).filter("YearMonth=" + month).filter(col(measure).notEqual("-").and(col(measure).notEqual("M")).and(col(measure).isNotNull))
     val m: scala.collection.mutable.Map[String, String] = scala.collection.mutable.Map[String, String]()
-    ris.collect().map(row => m.put(row.getString(0), row.getString(1)))
+    sparkSession.sparkContext.parallelize(ris.collect(),4).map(row => m.put(row.getString(0), row.getString(1)))
     return m.asJava
   }
   def getMonthlyMeasureInPeriod( in: String, fin:String, measure: String, tipo: QueryType, param:String): DataFrame = {
     val df: DataFrame = getDatas("monthly")
-    val stationOfInterest = stations.select("WBAN","Location").filter(generateStationsQuery(tipo, param))
+    val stationOfInterest = getStationsOfInterest(tipo,param,"Location").filter(generateStationsQuery(tipo, param))
     return df.join(stationOfInterest, "WBAN").select("WBAN","Location","YearMonth",measure).filter("YearMonth <= " + fin +" AND YearMonth >= "+ in)
   }
   def getReliabilityOfStations(set:String, measure:String): Array[Array[String]]={
@@ -155,7 +156,7 @@
     return stations.select("WBAN", reqinfo).filter(generateStationsQuery(tipo, param)).dropDuplicates()
   }
   def getAllDates():Array[String]={
-  return dayly.select("YearMonthDay").collect().map(row=>row.getInt(0).toString())
+  return dayly.select("YearMonthDay").dropDuplicates("YearMonthDay").collect().map(row=>row.getInt(0).toString())
   }
   def getStationsName(): Array[String] ={
     return  stations.filter(col("Location").isNotNull.and(col("WBAN").isNotNull)).select("WBAN","Location").collect().map(row=> row.getInt(0)+"-"+row.getString(1))
Index: src/main/java/ApplicazioneDatiMetereologici.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import DataApi.DataAPI;\r\nimport SingletonClasses.ApplicazioneDatiMetereologiciGUI;\r\nimport SingletonClasses.QueryInfo;\r\nimport org.apache.spark.sql.SparkSession;\r\n\r\n\r\npublic class ApplicazioneDatiMetereologici  {\r\n    public static void main (String[] args){\r\n        SparkSession spark =SparkSession.builder()\r\n                .master( \"local\")\r\n                .appName(\"Applicazione dati meteo\")\r\n                .getOrCreate();\r\n        DataAPI.start(spark);\r\n        QueryInfo.getInstance();\r\n        ApplicazioneDatiMetereologiciGUI.getInstance().setVisible(true);\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ApplicazioneDatiMetereologici.java b/src/main/java/ApplicazioneDatiMetereologici.java
--- a/src/main/java/ApplicazioneDatiMetereologici.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/ApplicazioneDatiMetereologici.java	(date 1676546054882)
@@ -7,7 +7,8 @@
 public class ApplicazioneDatiMetereologici  {
     public static void main (String[] args){
         SparkSession spark =SparkSession.builder()
-                .master( "local")
+                .config("spark.sql.files.minPartitionBytes", 36000)
+                .master( "spark://192.168.56.1:7077")
                 .appName("Applicazione dati meteo")
                 .getOrCreate();
         DataAPI.start(spark);
Index: src/main/java/Query/DaylyQueryParams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Query;\r\n\r\nimport DataApi.DataAPI;\r\nimport DataApi.GraphCreator;\r\nimport Enums.QueryPeriod;\r\nimport Enums.QueryType;\r\nimport Exceptions.NoValuesForParamsException;\r\nimport Exceptions.UncompleteQueryParamInitialization;\r\nimport Exceptions.WrongDateInitialization;\r\nimport Panel.SubPanel.PeriodQueryTableVisualization;\r\nimport Panel.SubPanel.QueryTableVisualization;\r\nimport org.knowm.xchart.XChartPanel;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class DaylyQueryParams extends QueryParams {\r\n    private String measure,datai,dataf;\r\n    private QueryType type;\r\n    private QueryPeriod period;\r\n    public DaylyQueryParams(){}\r\n\r\n    public QueryType getType() {\r\n        return type;\r\n    }\r\n\r\n    public QueryPeriod getPeriod() {\r\n        return period;\r\n    }\r\n    public void setMeasure(String measure) {\r\n        this.measure = measure;\r\n    }\r\n    public void setParam(String param){\r\n        super.param=param;\r\n    }\r\n\r\n    public void setDatai(String datai) {\r\n        this.datai = datai;\r\n    }\r\n\r\n    public void setDataf(String dataf) {\r\n        this.dataf = dataf;\r\n    }\r\n\r\n    public void setType(QueryType type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public void setPeriod(QueryPeriod period) {\r\n        this.period = period;\r\n        System.out.println(this.period);\r\n    }\r\n\r\n    @Override\r\n    public void verify() throws UncompleteQueryParamInitialization, WrongDateInitialization {\r\n        switch (period){\r\n            case SINGLE_DAY -> {\r\n                if(type==null || measure==null || datai==null || param == null )throw new UncompleteQueryParamInitialization();\r\n            }\r\n            case PERIOD_DAYS -> {\r\n                if(type==null || measure==null || datai==null || dataf==null){\r\n                    throw new UncompleteQueryParamInitialization();\r\n                }\r\n                if(Integer.parseInt(datai)>Integer.parseInt(dataf)){\r\n                    throw new WrongDateInitialization();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public JPanel createGraph() throws NoValuesForParamsException {\r\n        JPanel ris = null;\r\n        switch (period){\r\n            case PERIOD_DAYS -> {\r\n                if(measure.equals(\"Sunset\")|| measure.equals(\"Sunrise\")) {\r\n                    ris = new PeriodQueryTableVisualization(measure,GraphCreator.getDaylyMeasureGraphForDateVal(\"dayly\", datai, dataf, measure, type, param));\r\n                }\r\n                else {ris = new XChartPanel<>(GraphCreator.getDaylyMeasureGraphForDoubleVal(\"dayly\",datai,dataf,measure,type,param));}\r\n            }\r\n            case SINGLE_DAY -> {\r\n                ris= new QueryTableVisualization(measure, DataAPI.getMeasureByDay(\"dayly\", datai, measure, type, param));\r\n            }\r\n        }\r\n        return ris;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Query/DaylyQueryParams.java b/src/main/java/Query/DaylyQueryParams.java
--- a/src/main/java/Query/DaylyQueryParams.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/Query/DaylyQueryParams.java	(date 1676480548240)
@@ -47,7 +47,6 @@
 
     public void setPeriod(QueryPeriod period) {
         this.period = period;
-        System.out.println(this.period);
     }
 
     @Override
Index: src/main/java/Query/QueryParams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Query;\r\n\r\nimport Exceptions.NoValuesForParamsException;\r\nimport Exceptions.UncompleteQueryParamInitialization;\r\nimport Exceptions.WrongDateInitialization;\r\n\r\nimport javax.swing.*;\r\n\r\npublic abstract class QueryParams {\r\n    String param;\r\n\r\n    abstract void verify() throws UncompleteQueryParamInitialization, WrongDateInitialization;\r\n    abstract JPanel createGraph() throws NoValuesForParamsException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Query/QueryParams.java b/src/main/java/Query/QueryParams.java
--- a/src/main/java/Query/QueryParams.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/Query/QueryParams.java	(date 1676480939475)
@@ -11,4 +11,5 @@
 
     abstract void verify() throws UncompleteQueryParamInitialization, WrongDateInitialization;
     abstract JPanel createGraph() throws NoValuesForParamsException;
+
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"016574d8-dd39-43dc-9f69-36a071600d02\" name=\"Changes\" comment=\"Prima versione finale funzionante dell'applicazione.\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Enums/PossibleWeatherInfo.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Enums/QueryPeriod.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Exceptions/UncompleteQueryParamInitialization.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Exceptions/WrongDateInitialization.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/DaylyQueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/HourlyQueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/MonthlyQueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/PrecipitationQueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/QueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/ReliabilityQueryParams.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/Query/WeatherInfoQueryParams.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Exceptions/NoValuesForParamsException.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Exceptions/NoValuesForParamsException.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/DaylyMeasurePanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/DaylyMeasurePanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/HourlyMeasurePanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/HourlyMeasurePanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/MonthlyMeasurePanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/MonthlyMeasurePanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/PrecipitationPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/PrecipitationPanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/ReliabilityPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/ReliabilityPanel.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/SubPanel/MonthlyQueryTable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/SubPanel/MonthlyQueryTable.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/SubPanel/PeriodQueryTableVisualization.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/SubPanel/PeriodQueryTableVisualization.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Panel/WeatherInfoPanel.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Panel/WeatherInfoPanel.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"CodeStyleSettingsInfer\">\r\n    <option name=\"done\" value=\"true\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"Enum\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIEW_PUSH_PROTECTED_ONLY\" value=\"true\" />\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"8f3e0e55-f487-407c-b20c-42a9a944d9a2\" />\r\n        <option name=\"url\" value=\"https://github.com/Fabri000/ApplicazioneDatiMetereologici.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Jv3vGZ64y6B1QuzVaFnQP4HJzd\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/xchart-3.8.2.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.ApplicazioneDatiMetereologici\">\r\n    <configuration name=\"ApplicazioneDatiMetereologici\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ApplicazioneDatiMetereologici\" />\r\n      <module name=\"ApplicazioneDatiMetereologici\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--add-exports java.base/sun.nio.ch=ALL-UNNAMED\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Starter\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Starter\" />\r\n      <module name=\"ApplicazioneDatiMetereologici\" />\r\n      <option name=\"VM_PARAMETERS\" value=\"--add-exports java.base/sun.nio.ch=ALL-UNNAMED\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Scala REPL\" type=\"ScalaScriptConsoleRunConfiguration\" factoryName=\"Scala Console\" temporary=\"true\" show_console_on_std_err=\"false\" show_console_on_std_out=\"false\">\r\n      <module name=\"ApplicazioneDatiMetereologici\" />\r\n      <option name=\"allowRunningInParallel\" value=\"false\" />\r\n      <option name=\"javaOptions\" value=\"-Djline.terminal=NONE\" />\r\n      <option name=\"myConsoleArgs\" value=\"\" />\r\n      <option name=\"projectPathOnTarget\" />\r\n      <option name=\"selectedOptions\">\r\n        <list />\r\n      </option>\r\n      <option name=\"workingDirectory\" value=\"$PROJECT_DIR$\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.ApplicazioneDatiMetereologici\" />\r\n      <item itemvalue=\"Application.Starter\" />\r\n      <item itemvalue=\"Scala REPL.Scala REPL\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.ApplicazioneDatiMetereologici\" />\r\n        <item itemvalue=\"Scala REPL.Scala REPL\" />\r\n        <item itemvalue=\"Application.Starter\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"016574d8-dd39-43dc-9f69-36a071600d02\" name=\"Changes\" comment=\"\" />\r\n      <created>1672944958488</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1672944958488</updated>\r\n      <workItem from=\"1672944960054\" duration=\"1349000\" />\r\n      <workItem from=\"1673085275350\" duration=\"5251000\" />\r\n      <workItem from=\"1673108149239\" duration=\"1373000\" />\r\n      <workItem from=\"1673168953534\" duration=\"3366000\" />\r\n      <workItem from=\"1673275505677\" duration=\"7423000\" />\r\n      <workItem from=\"1673605047206\" duration=\"2241000\" />\r\n      <workItem from=\"1673607930227\" duration=\"428000\" />\r\n      <workItem from=\"1673622645180\" duration=\"3136000\" />\r\n      <workItem from=\"1673776449320\" duration=\"3129000\" />\r\n      <workItem from=\"1673797954665\" duration=\"3127000\" />\r\n      <workItem from=\"1673804429056\" duration=\"375000\" />\r\n      <workItem from=\"1673859738889\" duration=\"5709000\" />\r\n      <workItem from=\"1673947861591\" duration=\"7112000\" />\r\n      <workItem from=\"1673968537861\" duration=\"2614000\" />\r\n      <workItem from=\"1674030809632\" duration=\"9889000\" />\r\n      <workItem from=\"1674123209238\" duration=\"595000\" />\r\n      <workItem from=\"1674204607609\" duration=\"7814000\" />\r\n      <workItem from=\"1674228332586\" duration=\"2513000\" />\r\n      <workItem from=\"1674294025877\" duration=\"7097000\" />\r\n      <workItem from=\"1674480163782\" duration=\"10652000\" />\r\n      <workItem from=\"1674507768762\" duration=\"3185000\" />\r\n      <workItem from=\"1674550942516\" duration=\"2638000\" />\r\n      <workItem from=\"1674576789875\" duration=\"1353000\" />\r\n      <workItem from=\"1674578476068\" duration=\"4998000\" />\r\n      <workItem from=\"1674635934523\" duration=\"10264000\" />\r\n      <workItem from=\"1674650415205\" duration=\"40000\" />\r\n      <workItem from=\"1674682201802\" duration=\"450000\" />\r\n      <workItem from=\"1674721458023\" duration=\"9598000\" />\r\n      <workItem from=\"1674732268893\" duration=\"241000\" />\r\n      <workItem from=\"1674754770106\" duration=\"2371000\" />\r\n      <workItem from=\"1674827533934\" duration=\"8639000\" />\r\n      <workItem from=\"1674853453957\" duration=\"3993000\" />\r\n      <workItem from=\"1674894385764\" duration=\"5665000\" />\r\n      <workItem from=\"1674900419215\" duration=\"1907000\" />\r\n      <workItem from=\"1674917366841\" duration=\"719000\" />\r\n      <workItem from=\"1674925085385\" duration=\"7711000\" />\r\n      <workItem from=\"1675001557210\" duration=\"14044000\" />\r\n      <workItem from=\"1675068427432\" duration=\"9584000\" />\r\n      <workItem from=\"1675078719439\" duration=\"3937000\" />\r\n      <workItem from=\"1675092019979\" duration=\"4101000\" />\r\n      <workItem from=\"1675154724151\" duration=\"11077000\" />\r\n      <workItem from=\"1675182273034\" duration=\"1131000\" />\r\n      <workItem from=\"1675184604348\" duration=\"5829000\" />\r\n      <workItem from=\"1675241675428\" duration=\"10110000\" />\r\n      <workItem from=\"1675347294336\" duration=\"14792000\" />\r\n      <workItem from=\"1675374998447\" duration=\"955000\" />\r\n      <workItem from=\"1675376039739\" duration=\"343000\" />\r\n      <workItem from=\"1675412399834\" duration=\"12841000\" />\r\n      <workItem from=\"1675427207767\" duration=\"488000\" />\r\n      <workItem from=\"1675438721072\" duration=\"3520000\" />\r\n      <workItem from=\"1675458842379\" duration=\"3195000\" />\r\n      <workItem from=\"1675498597205\" duration=\"10224000\" />\r\n      <workItem from=\"1675758263767\" duration=\"9577000\" />\r\n      <workItem from=\"1675780008385\" duration=\"12362000\" />\r\n      <workItem from=\"1675793067574\" duration=\"220000\" />\r\n      <workItem from=\"1675849468961\" duration=\"5624000\" />\r\n      <workItem from=\"1675932855763\" duration=\"6512000\" />\r\n      <workItem from=\"1675956982305\" duration=\"1281000\" />\r\n      <workItem from=\"1675960196808\" duration=\"58000\" />\r\n      <workItem from=\"1675963577317\" duration=\"449000\" />\r\n      <workItem from=\"1676019415113\" duration=\"8778000\" />\r\n      <workItem from=\"1676194200925\" duration=\"7200000\" />\r\n      <workItem from=\"1676219750537\" duration=\"5520000\" />\r\n      <workItem from=\"1676476432768\" duration=\"809000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Versione iniziale\">\r\n      <created>1673804629199</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1673804629199</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Prima modifica: aggiunta main java per interrogazioni sul db.\">\r\n      <created>1673861084400</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1673861084400</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Aggiunta delle prime  query per ottenere misurazioni orarie/giornaliere per una determinata stazione o per uno stato.\">\r\n      <created>1674033131887</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674033131887</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Aggiunte tutte le query di recupero di informazioni per i dataset  dayly e hourly.\">\r\n      <created>1674038853569</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674038853569</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Riduzione ad un unica funzione per le queary di ricerca di valori di interesse per un giorno.\">\r\n      <created>1674041919888</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674041919888</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Raggruppate tutte le query che svolgono funzionalità simili.\">\r\n      <created>1674123713825</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674123713825</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Implementati query per recupero delle misurazioni di interesse per i vari dataset (eccetto i remarks).\">\r\n      <created>1674208393708</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674208393709</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Implementati metodi per calcolare l'affidabilità(per una misura) delle stazioni (basato sulla flag M)\">\r\n      <created>1674297369472</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674297369473</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Implementate tutte le query per il dataframe.\">\r\n      <created>1674577810940</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674577810940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Versione iniziale gui\">\r\n      <created>1674580121280</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674580121280</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Gui 1.0\">\r\n      <created>1674636013912</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674636013912</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Gui 1.1\">\r\n      <created>1674834816401</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1674834816401</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Gui 2.0\">\r\n      <created>1675072901299</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1675072901299</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Gui 2.1\">\r\n      <created>1675156721968</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1675156721968</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"Gui 3.0\">\r\n      <created>1675506863669</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1675506863669</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"Gui 4.0\">\r\n      <created>1675854526170</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1675854526170</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Inserite le misure possibili per i vari dataset nella classe QueryInfo\">\r\n      <created>1675960242592</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1675960242592</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Prima versione finale funzionante dell'applicazione.\">\r\n      <created>1676195552487</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676195552487</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"19\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Versione iniziale\" />\r\n    <MESSAGE value=\"Prima modifica: aggiunta main java per interrogazioni sul db.\" />\r\n    <MESSAGE value=\"Aggiunta delle prime  query per ottenere misurazioni orarie/giornaliere per una determinata stazione o per uno stato.\" />\r\n    <MESSAGE value=\"Aggiunte tutte le query di recupero di informazioni per i dataset  dayly e hourly.\" />\r\n    <MESSAGE value=\"Riduzione ad un unica funzione per le queary di ricerca di valori di interesse per un giorno.\" />\r\n    <MESSAGE value=\"Raggruppate tutte le query che svolgono funzionalità simili.\" />\r\n    <MESSAGE value=\"Implementati query per recupero delle misurazioni di interesse per i vari dataset (eccetto i remarks).\" />\r\n    <MESSAGE value=\"Implementati metodi per calcolare l'affidabilità(per una misura) delle stazioni (basato sulla flag M)\" />\r\n    <MESSAGE value=\"Implementate tutte le query per il dataframe.\" />\r\n    <MESSAGE value=\"Versione iniziale gui\" />\r\n    <MESSAGE value=\"Gui 1.0\" />\r\n    <MESSAGE value=\"Gui 1.1\" />\r\n    <MESSAGE value=\"Gui 2.0\" />\r\n    <MESSAGE value=\"Gui 2.1\" />\r\n    <MESSAGE value=\"Gui 3.0\" />\r\n    <MESSAGE value=\"Gui 4.0\" />\r\n    <MESSAGE value=\"Inserite le misure possibili per i vari dataset nella classe QueryInfo\" />\r\n    <MESSAGE value=\"Prima versione finale funzionante dell'applicazione.\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Prima versione finale funzionante dell'applicazione.\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/.idea/workspace.xml	(date 1676561553437)
@@ -4,28 +4,15 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="016574d8-dd39-43dc-9f69-36a071600d02" name="Changes" comment="Prima versione finale funzionante dell'applicazione.">
-      <change afterPath="$PROJECT_DIR$/src/main/java/Enums/PossibleWeatherInfo.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Enums/QueryPeriod.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Exceptions/UncompleteQueryParamInitialization.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Exceptions/WrongDateInitialization.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/DaylyQueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/HourlyQueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/MonthlyQueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/PrecipitationQueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/QueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/ReliabilityQueryParams.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/java/Query/WeatherInfoQueryParams.java" afterDir="false" />
+    <list default="true" id="016574d8-dd39-43dc-9f69-36a071600d02" name="Changes" comment="Versione finale dell'applicazione.&#10;Isolata la gestione dei parametri delle query.&#10;Migliorie sulla ui da realizzare">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Exceptions/NoValuesForParamsException.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Exceptions/NoValuesForParamsException.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/DaylyMeasurePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/DaylyMeasurePanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/ApplicazioneDatiMetereologici.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ApplicazioneDatiMetereologici.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Panel/HourlyMeasurePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/HourlyMeasurePanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/MonthlyMeasurePanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/MonthlyMeasurePanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/PrecipitationPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/PrecipitationPanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/ReliabilityPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/ReliabilityPanel.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/MonthlyQueryTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/MonthlyQueryTable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/PeriodQueryTableVisualization.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/PeriodQueryTableVisualization.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/WeatherInfoPanel.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/WeatherInfoPanel.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/QueryTableVisualization.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Panel/SubPanel/QueryTableVisualization.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Query/DaylyQueryParams.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Query/DaylyQueryParams.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Query/HourlyQueryParams.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Query/HourlyQueryParams.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/Query/QueryParams.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Query/QueryParams.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/scala/DataApi/DataAPI.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/DataApi/DataAPI.scala" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -43,8 +30,8 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="Class" />
         <option value="Enum" />
+        <option value="Class" />
       </list>
     </option>
   </component>
@@ -222,6 +209,9 @@
       <workItem from="1676194200925" duration="7200000" />
       <workItem from="1676219750537" duration="5520000" />
       <workItem from="1676476432768" duration="809000" />
+      <workItem from="1676477652419" duration="2504000" />
+      <workItem from="1676538411891" duration="1718000" />
+      <workItem from="1676542176408" duration="6162000" />
     </task>
     <task id="LOCAL-00001" summary="Versione iniziale">
       <created>1673804629199</created>
@@ -349,13 +339,32 @@
       <option name="project" value="LOCAL" />
       <updated>1676195552487</updated>
     </task>
-    <option name="localTasksCounter" value="19" />
+    <task id="LOCAL-00019" summary="Versione finale dell'applicazione.&#10;Isolata la gestione dei parametri delle query.&#10;Migliorie sulla ui da realizzare">
+      <created>1676477922791</created>
+      <option name="number" value="00019" />
+      <option name="presentableId" value="LOCAL-00019" />
+      <option name="project" value="LOCAL" />
+      <updated>1676477922791</updated>
+    </task>
+    <option name="localTasksCounter" value="20" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="VcsManagerConfiguration">
+    <option name="LOCAL_CHANGES_DETAILS_PREVIEW_SHOWN" value="false" />
     <MESSAGE value="Versione iniziale" />
     <MESSAGE value="Prima modifica: aggiunta main java per interrogazioni sul db." />
     <MESSAGE value="Aggiunta delle prime  query per ottenere misurazioni orarie/giornaliere per una determinata stazione o per uno stato." />
@@ -374,6 +383,7 @@
     <MESSAGE value="Gui 4.0" />
     <MESSAGE value="Inserite le misure possibili per i vari dataset nella classe QueryInfo" />
     <MESSAGE value="Prima versione finale funzionante dell'applicazione." />
-    <option name="LAST_COMMIT_MESSAGE" value="Prima versione finale funzionante dell'applicazione." />
+    <MESSAGE value="Versione finale dell'applicazione.&#10;Isolata la gestione dei parametri delle query.&#10;Migliorie sulla ui da realizzare" />
+    <option name="LAST_COMMIT_MESSAGE" value="Versione finale dell'applicazione.&#10;Isolata la gestione dei parametri delle query.&#10;Migliorie sulla ui da realizzare" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/Query/HourlyQueryParams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Query;\r\n\r\nimport DataApi.GraphCreator;\r\nimport Enums.QueryPeriod;\r\nimport Enums.QueryType;\r\nimport Exceptions.NoValuesForParamsException;\r\nimport Exceptions.UncompleteQueryParamInitialization;\r\nimport Exceptions.WrongDateInitialization;\r\nimport org.knowm.xchart.XChartPanel;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class HourlyQueryParams extends QueryParams{\r\n    private String measure, datai,dataf,houri,hourf;\r\n    private QueryType type;\r\n    private QueryPeriod period;\r\n\r\n    public void setMeasure(String measure) {\r\n        this.measure = measure;\r\n    }\r\n\r\n    public void setDatai(String datai) {\r\n        this.datai = datai;\r\n    }\r\n\r\n    public void setDataf(String dataf) {\r\n        this.dataf = dataf;\r\n    }\r\n\r\n    public void setHouri(String houri) {\r\n        this.houri = houri;\r\n    }\r\n\r\n    public void setHourf(String hourf) {\r\n        this.hourf = hourf;\r\n    }\r\n    public void setParam(String param){\r\n        super.param=param;\r\n    }\r\n    public void setType(QueryType type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public void setPeriod(QueryPeriod period) {\r\n        this.period = period;\r\n    }\r\n\r\n    public QueryType getType() {\r\n        return type;\r\n    }\r\n\r\n    public QueryPeriod getPeriod() {\r\n        return period;\r\n    }\r\n\r\n    @Override\r\n    public void verify() throws UncompleteQueryParamInitialization, WrongDateInitialization {\r\n        switch (period){\r\n            case HOUR_PERIOD_FOR_DAY-> {\r\n                if(measure==null || datai==null || houri == null || hourf==null ) throw new UncompleteQueryParamInitialization();\r\n                if(Integer.parseInt(houri)>Integer.parseInt(hourf) & ! hourf.equals(\"0000\")) throw  new WrongDateInitialization();\r\n            }\r\n            case PERIOD_DAYS -> {\r\n                if(measure==null || datai==null || dataf==null ) throw new UncompleteQueryParamInitialization();\r\n                if(Integer.parseInt(datai)>Integer.parseInt(dataf)) throw  new WrongDateInitialization();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public JPanel createGraph() throws NoValuesForParamsException {\r\n        JPanel ris = null;\r\n        switch (period){\r\n            case HOUR_PERIOD_FOR_DAY ->{ ris  = new XChartPanel<>(GraphCreator.getHourlyMeasureGraphForDateVal(datai,houri,hourf,measure,type,param));}\r\n            case PERIOD_DAYS -> {ris =new XChartPanel<>(GraphCreator.getDaylyMeasureForHourlyPeriod(datai,dataf,measure,type,param));}\r\n        }\r\n        return ris;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Query/HourlyQueryParams.java b/src/main/java/Query/HourlyQueryParams.java
--- a/src/main/java/Query/HourlyQueryParams.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/Query/HourlyQueryParams.java	(date 1676538745687)
@@ -67,7 +67,6 @@
         }
     }
 
-
     @Override
     public JPanel createGraph() throws NoValuesForParamsException {
         JPanel ris = null;
Index: src/main/java/Panel/SubPanel/QueryTableVisualization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Panel.SubPanel;\r\nimport Exceptions.NoValuesForParamsException;\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.util.Map;\r\npublic class QueryTableVisualization extends JPanel {\r\n    public QueryTableVisualization(String measure, Map<String,String> measures) throws NoValuesForParamsException {\r\n        if(measures.keySet().size()==0) throw  new NoValuesForParamsException();\r\n        this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));\r\n        Object[][] vals = new Object[measures.keySet().size()][2];\r\n        int i = 0;\r\n        for (String k: measures.keySet()) {\r\n            vals[i][0]=k;\r\n            if(measure.equals(\"Sunset\")|| measure.equals(\"Sunrise\")) {\r\n                String val = measures.get(k).toString();\r\n                vals[i][1]=val.substring(0,2)+\":\"+val.substring(2,4);\r\n            }\r\n            else  vals[i][1]=measures.get(k);\r\n            i++;\r\n        }\r\n        JTable ris = new JTable(new DefaultTableModel(vals, new String[]{\"Location\",measure}));\r\n        ris.setEnabled(false);\r\n        this.add(new JScrollPane(ris));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Panel/SubPanel/QueryTableVisualization.java b/src/main/java/Panel/SubPanel/QueryTableVisualization.java
--- a/src/main/java/Panel/SubPanel/QueryTableVisualization.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/Panel/SubPanel/QueryTableVisualization.java	(date 1676546350359)
@@ -14,7 +14,12 @@
             vals[i][0]=k;
             if(measure.equals("Sunset")|| measure.equals("Sunrise")) {
                 String val = measures.get(k).toString();
-                vals[i][1]=val.substring(0,2)+":"+val.substring(2,4);
+                if(Integer.parseInt(val)<100){
+                    vals[i][1]="00:"+val.substring(0,2);    
+                } else if (Integer.parseInt(val)<1000) {
+                    vals[i][1]="0"+val.substring(0,1)+":"+val.substring(1,3);
+                }
+                else vals[i][1]=val.substring(0,2)+":"+val.substring(2,4);
             }
             else  vals[i][1]=measures.get(k);
             i++;
Index: src/main/java/Panel/HourlyMeasurePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Panel;\r\n\r\nimport DataApi.GraphCreator;\r\nimport Enums.QueryPeriod;\r\nimport Exceptions.NoValuesForParamsException;\r\nimport Exceptions.UncompleteQueryParamInitialization;\r\nimport Exceptions.WrongDateInitialization;\r\nimport Query.HourlyQueryParams;\r\nimport SingletonClasses.ApplicazioneDatiMetereologiciGUI;\r\nimport SingletonClasses.QueryInfo;\r\nimport org.knowm.xchart.XChartPanel;\r\n\r\nimport javax.swing.*;\r\nimport javax.swing.border.EmptyBorder;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.event.ItemEvent;\r\nimport java.awt.event.ItemListener;\r\n\r\npublic class HourlyMeasurePanel extends JPanel {\r\n    private HourlyQueryParams params;\r\n    private JComboBox  stateselectionbox, timezoneselectionbox, stationselectionbox, zoneselectionbox;\r\n    private JCheckBox dataandhourperiod,periodindays;\r\n    private JComboBox datain, datafin, hourin,hourfin;\r\n    private JButton submitButton, newResearchButton, returnHomeButton;\r\n    private JPanel queryResult;\r\n\r\n    public HourlyMeasurePanel(){\r\n        params=new HourlyQueryParams();\r\n        stateselectionbox =new JComboBox<String>(QueryInfo.getInstance().getStates());\r\n        timezoneselectionbox=new JComboBox<String>(QueryInfo.getInstance().getTimezone());\r\n        stationselectionbox=new JComboBox<String>(QueryInfo.getInstance().getStations());\r\n        zoneselectionbox= new JComboBox<String>(QueryInfo.getInstance().getZone());\r\n        this.setSize(new Dimension(1920,1080));\r\n        this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));\r\n        this.setBorder(new EmptyBorder(50,100,0,100));\r\n        this.add(new TypeAndMeasureSelectionPanel());\r\n        this.add(new TimePeriodSelectionPanel());\r\n        this.add(new SelectionQueryParamsPanel());\r\n        JPanel submitPanel = new JPanel(); submitPanel.setSize( new Dimension(100,20));\r\n        submitButton = new JButton(\"Cerca\");\r\n        submitButton.addActionListener(new submitButtonLister());\r\n        submitButton.setEnabled(false);\r\n        submitPanel.add(submitButton);\r\n        this.add(submitPanel);\r\n        queryResult=new JPanel();\r\n        queryResult.setVisible(false);\r\n        this.add(queryResult);\r\n        JPanel buttons = new JPanel();\r\n        buttons.setLayout(new BoxLayout(buttons,BoxLayout.X_AXIS));\r\n        newResearchButton = new JButton(\"Nuova ricerca\");\r\n        newResearchButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if(e.getSource().equals(newResearchButton)){\r\n                    ApplicazioneDatiMetereologiciGUI.getInstance().setView(new HourlyMeasurePanel());\r\n                }\r\n            }\r\n        });\r\n        returnHomeButton=new JButton(\"Ritorna alla home\");\r\n        returnHomeButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                if (e.getSource().equals(returnHomeButton)){\r\n                    ApplicazioneDatiMetereologiciGUI.getInstance().setView(new Dashboard());\r\n                }\r\n            }\r\n        });\r\n        buttons.add( newResearchButton );\r\n        buttons.add(Box.createRigidArea(new Dimension(10,0)));\r\n        buttons.add( returnHomeButton);\r\n        this.add(buttons);\r\n        this.add(Box.createRigidArea(new Dimension(40,0)));\r\n    }\r\n    class TypeAndMeasureSelectionPanel extends  JPanel{\r\n        private JComboBox<String> measureSelector,typeOfQuerySelector;\r\n        private CustomJComboBoxListener comboBoxListener;\r\n\r\n        public TypeAndMeasureSelectionPanel(){\r\n            comboBoxListener = new CustomJComboBoxListener();\r\n            this.setAlignmentX(CENTER_ALIGNMENT);\r\n            this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));\r\n            this.setBorder(new EmptyBorder(10,0,10,0));\r\n            this.setMaximumSize(new Dimension(920,20));\r\n            JPanel p1 = new JPanel();\r\n            p1.setSize(0,20);\r\n            p1.setLayout(new BoxLayout(p1, BoxLayout.Y_AXIS));\r\n            JLabel l1  = new JLabel(\"Seleziona la misura di interesse:\");\r\n            p1.add(l1);\r\n            measureSelector = new JComboBox<>(QueryInfo.getInstance().getHourlymeasures().keySet().toArray(new String[0]));\r\n            measureSelector.setSelectedItem(null);\r\n            measureSelector.setAlignmentX(LEFT_ALIGNMENT);\r\n            measureSelector.setSize(new Dimension(300,25));\r\n            measureSelector.addItemListener(comboBoxListener);\r\n            p1.add(measureSelector);\r\n            this.add(p1);\r\n            this.add(Box.createRigidArea(new Dimension(100,0)));\r\n            JPanel p2 = new JPanel();\r\n            p2.setSize(600,20);\r\n            p2.setLayout(new BoxLayout(p2, BoxLayout.Y_AXIS));\r\n            JLabel l2 = new JLabel(\"Seleziona i parametri di interesse:\");\r\n            p2.add(l2);\r\n            typeOfQuerySelector = new JComboBox<>(QueryInfo.getInstance().getTypeOfQuery().keySet().toArray(new String[0]));\r\n            typeOfQuerySelector.setSelectedItem(null);\r\n            typeOfQuerySelector.setAlignmentX(LEFT_ALIGNMENT);\r\n            typeOfQuerySelector.setSize(new Dimension(300,25));\r\n            typeOfQuerySelector.addItemListener(comboBoxListener);\r\n            p2.add(typeOfQuerySelector);\r\n            this.add(p2);\r\n        }\r\n        public class CustomJComboBoxListener implements ItemListener {\r\n            @Override\r\n            public void itemStateChanged(ItemEvent e) {\r\n                if(e.getStateChange()== ItemEvent.SELECTED){\r\n                    JComboBox source = (JComboBox) e.getSource();\r\n                    if(source.equals(measureSelector)){\r\n                       params.setMeasure(QueryInfo.getInstance().getHourlymeasures().get(source.getSelectedItem()));\r\n                        measureSelector.setEnabled(false);\r\n                        ApplicazioneDatiMetereologiciGUI.getInstance().getContentPane().revalidate();\r\n                    }\r\n                    else if (source.equals(typeOfQuerySelector)){\r\n                        params.setType(QueryInfo.getInstance().getTypeOfQuery().get(source.getSelectedItem()));\r\n                        typeOfQuerySelector.setEnabled(false);\r\n                        switch (params.getType()){\r\n                            case STATE -> stateselectionbox.setEnabled(true);\r\n                            case STATION -> stationselectionbox.setEnabled(true);\r\n                            case TZONE -> timezoneselectionbox.setEnabled(true);\r\n                            case ZONE -> zoneselectionbox.setEnabled(true);\r\n                        }\r\n                        ApplicazioneDatiMetereologiciGUI.getInstance().getContentPane().revalidate();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class TimePeriodSelectionPanel extends JPanel{\r\n        ButtonGroup group = new ButtonGroup();\r\n        public TimePeriodSelectionPanel(){\r\n            this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));\r\n            this.setAlignmentX(CENTER_ALIGNMENT);\r\n            this.setMaximumSize(new Dimension(920,20));\r\n            this.setBorder(new EmptyBorder(0,0,10,0));\r\n            JPanel p1 = new JPanel();\r\n            p1.setLayout(new BoxLayout(p1,BoxLayout.X_AXIS));\r\n            JLabel l1 = new JLabel(\"Seleziona l'arco temporale:\");\r\n            p1.add(l1);\r\n            ActionListener listener = new PeriodSelectionListener();\r\n            dataandhourperiod = new JCheckBox(\"Giorno e Fascia oraria\");\r\n            dataandhourperiod.setSize(200,20);\r\n            dataandhourperiod.addActionListener(listener);\r\n            periodindays = new JCheckBox(\"Periodo di giorni\");\r\n            periodindays.addActionListener(listener);\r\n            periodindays.setSize(200,20);\r\n            p1.add(dataandhourperiod);p1.add(periodindays);\r\n            group.add(dataandhourperiod);group.add(periodindays);\r\n            this.add(p1);\r\n            JPanel p2 = new JPanel();\r\n            p2.setLayout(new BoxLayout(p2,BoxLayout.X_AXIS));\r\n            TimeSelectionComboBoxListener listener1 = new TimeSelectionComboBoxListener();\r\n            datain=new JComboBox<>(QueryInfo.getInstance().getDate());\r\n            datain.setSelectedItem(null);\r\n            datain.addItemListener(listener1);\r\n            datain.setEnabled(false);\r\n            datain.setSize(200,20);\r\n            datafin = new JComboBox(QueryInfo.getInstance().getDate());\r\n            datafin.setSelectedItem(null);\r\n            datafin.setSize(200,20);\r\n            datafin.addItemListener(listener1);\r\n            datafin.setEnabled(false);\r\n            hourin = new JComboBox(QueryInfo.getInstance().getFasceorarie());\r\n            hourin.setSelectedItem(null);\r\n            hourin.addItemListener(listener1);\r\n            hourin.setEnabled(false);\r\n            hourin.setSize(200,20);\r\n            hourfin = new JComboBox(QueryInfo.getInstance().getFasceorarie());\r\n            hourfin.setSelectedItem(null);\r\n            hourfin.addItemListener(listener1);\r\n            hourfin.setEnabled(false);\r\n            hourfin.setSize(200,20);\r\n            p2.add(new JLabel(\"Seleziona una data iniziale:\"));p2.add(datain);\r\n            p2.add(new JLabel(\"Seleziona una data finale:\"));p2.add(datafin);\r\n            p2.add(new JLabel(\"Selezione un'orario iniziale:\")); p2.add(hourin);\r\n            p2.add(new JLabel(\"Selezione un'orario finale:\")); p2.add(hourfin);\r\n            this.add(p2);\r\n        }\r\n        class PeriodSelectionListener implements ActionListener{\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                JCheckBox source = (JCheckBox) e.getSource();\r\n                if(source.equals(dataandhourperiod)){\r\n                    datain.setEnabled(true);\r\n                    hourin.setEnabled(true);\r\n                    hourfin.setEnabled(true);\r\n                    datafin.setSelectedItem(null);\r\n                    params.setDataf(null);\r\n                    datafin.setEnabled(false);\r\n                    params.setPeriod(QueryPeriod.HOUR_PERIOD_FOR_DAY);\r\n                }\r\n                else if (source.equals(periodindays)){\r\n                    datain.setEnabled(true);\r\n                    datafin.setEnabled(true);\r\n                    hourfin.setEnabled(false);\r\n                    hourfin.setSelectedItem(null);\r\n                    params.setHourf(null);\r\n                    hourin.setEnabled(false);\r\n                    hourin.setSelectedItem(null);\r\n                    params.setHouri(null);\r\n                    params.setPeriod(QueryPeriod.PERIOD_DAYS);\r\n                }\r\n            }\r\n        }\r\n        class TimeSelectionComboBoxListener implements ItemListener {\r\n            @Override\r\n            public void itemStateChanged(ItemEvent e) {\r\n                if(e.getStateChange()==ItemEvent.SELECTED){\r\n                    JComboBox<String> source = (JComboBox<String>) e.getSource();\r\n                    String val = source.getSelectedItem().toString();\r\n                    val=val.replace(\":\",\"\");\r\n                    if(source.equals(datain)) params.setDatai(val);\r\n                    else if (source.equals(datafin)) params.setDataf(val);\r\n                    else if (source.equals(hourin)) params.setHouri(val);\r\n                    else if (source.equals(hourfin)) params.setHourf(val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class SelectionQueryParamsPanel extends JPanel{\r\n        public SelectionQueryParamsPanel(){\r\n            this.setLayout(new BoxLayout(this,BoxLayout.X_AXIS));\r\n            this.setAlignmentX(CENTER_ALIGNMENT);\r\n            this.setSize(1000,20);\r\n            this.setBorder(new EmptyBorder(0,0,10,0));\r\n            SelectionQueryParamsListener listener = new SelectionQueryParamsListener();\r\n            JLabel l2 = new JLabel(\"Seleziona una stazione:\");\r\n            this.add(l2);\r\n            this.add(Box.createRigidArea(new Dimension(10,0)));\r\n            stationselectionbox.setSelectedItem(null);\r\n            stationselectionbox.setMaximumSize(new Dimension(200,20));\r\n            stationselectionbox.addItemListener(listener);\r\n            stationselectionbox.setEnabled(false);\r\n            this.add(stationselectionbox);\r\n            this.add(Box.createRigidArea(new Dimension(15,0)));\r\n            JLabel l3 = new JLabel(\"Seleziona un fuso orario:\");\r\n            this.add(l3);\r\n            this.add(Box.createRigidArea(new Dimension(10,0)));\r\n            timezoneselectionbox.setSelectedItem(null);\r\n            timezoneselectionbox.addItemListener(listener);\r\n            timezoneselectionbox.setMaximumSize(new Dimension(200,20));\r\n            timezoneselectionbox.setEnabled(false);\r\n            this.add(timezoneselectionbox);\r\n            this.add(Box.createRigidArea(new Dimension(15,0)));\r\n            JLabel l4 = new JLabel(\"Seleziona uno stato:\");\r\n            this.add(l4);\r\n            this.add(Box.createRigidArea(new Dimension(10,0)));\r\n            stateselectionbox.setSelectedItem(null);\r\n            stateselectionbox.addItemListener(listener);\r\n            stateselectionbox.setMaximumSize(new Dimension(200,20));\r\n            stateselectionbox.setEnabled(false);\r\n            this.add(stateselectionbox);\r\n            this.add(Box.createRigidArea(new Dimension(15,0)));\r\n            JLabel l5 = new JLabel(\"Seleziona una zona:\");\r\n            this.add(l5);\r\n            this.add(Box.createRigidArea(new Dimension(10,0)));\r\n            zoneselectionbox.setSelectedItem(null);\r\n            zoneselectionbox.addItemListener(listener);\r\n            zoneselectionbox.setMaximumSize(new Dimension(200,20));\r\n            zoneselectionbox.setEnabled(false);\r\n            this.add(zoneselectionbox);\r\n\r\n        }\r\n        class SelectionQueryParamsListener implements ItemListener{\r\n            @Override\r\n            public void itemStateChanged(ItemEvent e) {\r\n                if(e.getStateChange()==ItemEvent.SELECTED){\r\n                    submitButton.setEnabled(true);\r\n                    JComboBox<String> source = (JComboBox<String>) e.getSource();\r\n                    String val = source.getSelectedItem().toString();\r\n                    if (source.equals(stationselectionbox)) params.setParam(val.split(\"-\")[0]);\r\n                    else params.setParam(val);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    class  submitButtonLister implements ActionListener{\r\n        @Override\r\n        public void actionPerformed(ActionEvent e) {\r\n            if(e.getSource().equals(submitButton)){\r\n                try {\r\n                    params.verify();\r\n                    queryResult.add(params.createGraph());\r\n                } catch (UncompleteQueryParamInitialization ex) {\r\n                    JOptionPane.showMessageDialog(null, \"Alcuni parametri della query non sono stati inizializati\");\r\n                } catch (WrongDateInitialization ex) {\r\n                    JOptionPane.showMessageDialog(null, \"Il periodo selezionato non è valido\");\r\n                    datafin.setSelectedItem(null);\r\n                    params.setDataf(null);\r\n                    datain.setSelectedItem(null);\r\n                    params.setDatai(null);\r\n                    hourin.setSelectedItem(null);\r\n                    params.setHouri(null);\r\n                    hourfin.setSelectedItem(null);\r\n                    params.setHourf(null);\r\n                    params.setPeriod(null);\r\n                } catch (NoValuesForParamsException ex) {\r\n                    JOptionPane.showMessageDialog(null, \"Nel periodo selezionato non ci sono misurazioni valide per la richiesta\");\r\n                    ApplicazioneDatiMetereologiciGUI.getInstance().setView(new HourlyMeasurePanel());\r\n                }\r\n                queryResult.setVisible(true);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Panel/HourlyMeasurePanel.java b/src/main/java/Panel/HourlyMeasurePanel.java
--- a/src/main/java/Panel/HourlyMeasurePanel.java	(revision b74e790129e4d80d24f63a83995093196a6754c3)
+++ b/src/main/java/Panel/HourlyMeasurePanel.java	(date 1676538745797)
@@ -116,8 +116,8 @@
                     JComboBox source = (JComboBox) e.getSource();
                     if(source.equals(measureSelector)){
                        params.setMeasure(QueryInfo.getInstance().getHourlymeasures().get(source.getSelectedItem()));
-                        measureSelector.setEnabled(false);
-                        ApplicazioneDatiMetereologiciGUI.getInstance().getContentPane().revalidate();
+                       measureSelector.setEnabled(false);
+                       ApplicazioneDatiMetereologiciGUI.getInstance().getContentPane().revalidate();
                     }
                     else if (source.equals(typeOfQuerySelector)){
                         params.setType(QueryInfo.getInstance().getTypeOfQuery().get(source.getSelectedItem()));
